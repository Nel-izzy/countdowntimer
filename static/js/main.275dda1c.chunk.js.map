{"version":3,"sources":["CountDownTimer.js","CountDownForm.js","App.js","serviceWorker.js","index.js"],"names":["CountDownTimer","props","t","getTimeRemaining","date","state","days","hours","minutes","seconds","endtime","total","Date","parse","Math","floor","this","myInterval","setInterval","setState","currState","console","log","clearInterval","className","Component","CountDownForm","handleChange","e","target","name","value","handleSubmit","preventDefault","event","today","dd","getDate","mm","getMonth","yyyy","getFullYear","error","submitted","toDateString","display","onSubmit","placeholder","type","onChange","style","color","marginLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.275dda1c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./CountDownTimer.css\";\r\n\r\nexport default class CountDownTimer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const t = this.getTimeRemaining(this.props.date);\r\n    this.state = {\r\n      days: t.days,\r\n      hours: t.hours,\r\n      minutes: t.minutes,\r\n      seconds: t.seconds,\r\n    };\r\n  }\r\n\r\n  getTimeRemaining(endtime) {\r\n    const total = Date.parse(endtime) - Date.parse(new Date());\r\n    const seconds = Math.floor((total / 1000) % 60);\r\n    const minutes = Math.floor((total / 1000 / 60) % 60);\r\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\r\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\r\n\r\n    return {\r\n      total,\r\n      days,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.myInterval = setInterval(() => {\r\n      const { seconds, minutes, hours, days } = this.state;\r\n      if (seconds > 0) {\r\n        this.setState((currState) => ({\r\n          seconds: currState.seconds - 1,\r\n        }));\r\n      }\r\n      if (minutes > 0 && seconds === 0) {\r\n        this.setState((currState) => ({\r\n          minutes: currState.minutes - 1,\r\n          seconds: 59,\r\n        }));\r\n      }\r\n\r\n      if (hours > 0 && minutes === 0 && seconds === 0) {\r\n        this.setState((currState) => ({\r\n          hours: currState.hours - 1,\r\n          minutes: 59,\r\n          seconds: 59,\r\n        }));\r\n      }\r\n      if (days > 0 && hours === 0 && minutes === 0 && seconds === 0) {\r\n        this.setState((currState) => ({\r\n          days: currState.days - 1,\r\n          hours: 23,\r\n          minutes: 59,\r\n          seconds: 59,\r\n        }));\r\n      }\r\n    }, 1000);\r\n    console.log(this.props.date);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.myInterval);\r\n  }\r\n\r\n  render() {\r\n    const { minutes, seconds, hours, days } = this.state;\r\n\r\n    return (\r\n      <div className=\"timer-wrapper\">\r\n        {minutes === 0 && seconds === 0 && days === 0 && hours === 0 ? (\r\n          <h1>Countdown Finished!</h1>\r\n        ) : (\r\n          <div>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <div className=\"days\">\r\n                      <h1>{days}</h1>\r\n                      <h1>days</h1>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <div className=\"hours\">\r\n                      <h1>{hours}</h1>\r\n                      <h1>hours</h1>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <div className=\"minutes\">\r\n                      <h1>{minutes}</h1>\r\n                      <h1>minutes</h1>\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    <div className=\"seconds\">\r\n                      <h1>{seconds}</h1>\r\n                      <h1>seconds</h1>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <div className=\"summary\">\r\n              <h2>\r\n                Countdown Timer for <span>{this.props.date}</span>\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport CountDownTimer from \"./CountDownTimer\";\r\nimport \"./CountDownForm.css\";\r\n\r\nexport default class CountDownForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      event: \"\",\r\n      date: \"\",\r\n      submitted: false,\r\n      error: \"\",\r\n    };\r\n  }\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { event, date } = this.state;\r\n    if (event !== \"\" && date !== \"\") {\r\n      let today = new Date();\r\n      let dd = today.getDate();\r\n\r\n      let mm = today.getMonth() + 1;\r\n      const yyyy = today.getFullYear();\r\n      if (dd < 10) {\r\n        dd = `0${dd}`;\r\n      }\r\n\r\n      if (mm < 10) {\r\n        mm = `0${mm}`;\r\n      }\r\n      today = `${yyyy}-${mm}-${dd}`;\r\n\r\n      if (date <= today) {\r\n        this.setState({ error: \"Please enter a date in the future!\" });\r\n      } else {\r\n        this.setState({\r\n          submitted: true,\r\n          event: \"\",\r\n          error: \"\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    const today = new Date();\r\n    console.log(today.toDateString());\r\n  }\r\n\r\n  render() {\r\n    const display = (\r\n      <form onSubmit={this.handleSubmit} className=\"form\">\r\n        <h2>Register an Event</h2>\r\n        <div className=\"event\">\r\n          <label>Event Name</label>\r\n          <input\r\n            placeholder=\"Enter memorable event\"\r\n            type=\"text\"\r\n            name=\"event\"\r\n            value={this.state.event}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"date\">\r\n          <label>Date</label>\r\n          <input\r\n            placeholder=\"Enter a memorable date\"\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={this.state.date}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n\r\n        <button>Start</button>\r\n      </form>\r\n    );\r\n    return (\r\n      <div>\r\n        {this.state.submitted ? (\r\n          <CountDownTimer date={this.state.date} />\r\n        ) : (\r\n          display\r\n        )}\r\n        <h4 style={{ color: \"#ee1000\", marginLeft: \"3rem\" }}>\r\n          {this.state.error}\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport CountDownForm from \"./CountDownForm\";\n\nexport default function App() {\n  return (\n    <div>\n      <CountDownForm />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}